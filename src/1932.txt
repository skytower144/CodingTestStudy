//정수 삼각형// 동적 계획법//
// 각 층의 모든 칸마다 최댓값을 저장하면서 동적 계획법으로 푸는 문제 //

#include <stdio.h>
long tri[502][502] = {0,};
long ans[502][502] = {0,};
long max = 0;
long compare(int a, int b)
{
	if(a<b)
		return b;
	else
		return a;
}

long sol(int n)
{
	ans[1][1] = tri[1][1];
	for(int i=2; i<=n; i++)
	{
		for(int a=1; a<=i; a++)
		{
			if(a==1)
			{
				ans[i][a] = ans[i-1][a] + tri[i][1];
			}
			else if(a==i)
			{
				ans[i][a] = ans[i-1][a-1] + tri[i][a];
			}
			else
			{
				ans[i][a] = compare(ans[i-1][a-1], ans[i-1][a]) + tri[i][a];
			}	
		}
	}
	max = ans[n][1];
	for(int i=2; i<=n; i++)
	{
		if(max<ans[n][i])
			max = ans[n][i];
	}
	return max;
}
int main()
{
	int N;
	scanf("%d", &N);
	for(int i=1; i<=N; i++)
	{
		for(int a=1; a<=i; a++)
		{
			scanf("%ld", &tri[i][a]);
		}
	}
	sol(N);
	printf("%ld\n", max);
	return 0;
}

----------------------------------------------------------------------------------
https://www.acmicpc.net/source/28907995

#include <stdio.h>
#define max(a, b) (a > b ? a : b)

int arr[501][501] = { 0, };

int main() {
	int N, ans = 0;

	scanf("%d", &N);
	for (unsigned int i = 0; i < N; ++i) {
		for (unsigned int j = 0; j <= i; ++j) {
			scanf("%d", &arr[i][j]);
		}
	}

	for (unsigned int i = 1; i < N; ++i) {
		arr[i][0] += arr[i - 1][0];		//피라미드의 매 첫 칸의 경우
		for (unsigned int j = 1; j <= i; ++j) {
			arr[i][j] += max(arr[i - 1][j - 1], arr[i - 1][j]);
			if (i + 1 == N)			// 피라미드 마지막 행일 때
				ans = max(ans, arr[i][j - 1]);		//최댓값을 ans 변수에 업데이트시켜줌.
			if (i + 1 == N && j + 1 == N)			//피라미드 마지막 행의 마지막 칸의 경우
				ans = max(ans, arr[i][j]);
		}
	}

	printf("%d",ans);
}

