//N과 M (2)//

#include <stdio.h>

int N, M;
int t=0;
int memory[10] ={0,};
int boo[10] = {0, };
int dfs(int ct)
{
	if(ct == M)
	{
		for(int x=0; x<=M-2; x++)
		{
			if(memory[x] < memory[x+1])						//무조건 오름차순이 아니면 걸러내는 방식.
				t++;
		}
		if(t == M-1)
		{
			for(int x=0; x<M; x++)
			{
				printf("%d ", memory[x]);
			}
			printf("\n");
			t=0;
			return 0;
		}
	}
	for(int i=1; i<=N; i++)
	{
		if(boo[i] != 1)
		{
			boo[i] = 1;
			memory[ct] = i;
			dfs(ct+1);
			boo[i] = 0;	
		}
	}
	t=0;
	return 0;
}

int main(void)
{
	scanf("%d %d", &N, &M);
	dfs(0);
	
	return 0;
}

-------------------------------------------------------------------------------------------------
//https://www.acmicpc.net/source/26478391
//이 방식도 기본적으로는 오름차순의 규칙을 따른다.

#include <stdio.h>//15649  
#include <stdlib.h>
#include <string.h>
int N, M;int cnt=1;
int *arr;//출력하는 수열. 여기다 숫자 저장할거임.


void backtrack(int depth)
{
    if (depth >= M){
        for(int i=0 ; i<M ; i++){
            printf("%d ",arr[i]);
        }
        printf("\n");
        
        return;
    }

    for (int i=1 ; i<=N ; i++){
        if (depth == 0){					//첫번째칸에는 i를 하나씩 넣어본다.
            arr[depth] = i;
            backtrack(depth+1);
        }
        else{
            if (arr[depth-1] < i){			//전에있는칸 에 들어있는 수보다 커야한다는 조건.
                arr[depth] = i;
                backtrack(depth+1);
            }
        }
        
    }
}

int main(void)
{
    scanf("%d %d",&N,&M);
    arr = calloc(M,sizeof(int));
    backtrack(0);
    
    return 0;
}

////////////////////////////////////////////////////////////////////////////////////////
* 위 방식을 참고한 내 풀이):

#include <stdio.h>
int N, M;
int arr[10];

void back(int ct)
{
	if(ct == M)
	{
		for(int x=0; x<M; x++)
		{
			printf("%d ", arr[x]);
		}
		printf("\n");
		return;
	}
	if(ct==0)
	{
		for(int i=1;i<=N;i++)
		{
			arr[ct] = i;
			back(ct+1);
		}
	}
	else
		for(int i=1;i<=N;i++)
		{
			if(arr[ct-1]<i)
			{
				arr[ct] = i;
				back(ct+1);
			}
		}
}
int main(void)
{
	scanf("%d %d", &N, &M);
	back(0);
	
	return 0;
}


///////////////////////////////////////////////////////////////////////////////////////////////
N       M
범위     개수

n m
4 3

1 2 3
1 2 4
1 3 4
2 3 4

depth = 0
arr[0] = 1;
back(1)--------------depth = 1
                     arr[0] !< 1
                     arr[0] < 2
                        arr[1] = 2;
                        back(2)--------------------depth = 2
                                                   arr[1] !< 1 
                                                   arr[1] !< 2
                                                   arr[1] < 3
                                                      arr[2] = 3;
                                                      back(3)----------------- depth = 3 >= M
                                                                               print(1 2 3)
                                                          
                                                   arr[1] < 4
                                                      arr[2] = 4;
                                                      back(3)----------------- depth = 3 >= M
                                                                               print(1 2 4)
                     arr[0] < 3
                        arr[1] = 3;
                        back(2)--------------------depth = 2
                                                   arr[1] !< 1
                                                   arr[1] !< 2
                                                   arr[1] !< 3
                                                   arr[1] < 4
                                                      arr[2] = 4;
                                                      back(3)----------------- depth = 3 >= M
                                                                               print(1 3 4)
                     arr[0] < 4
                        arr[1] = 4;
                        back(2)--------------------depth = 2
                                                   arr[1] !< 1
                                                   arr[1] !< 2
                                                   arr[1] !< 3
                                                   arr[1] !< 4

arr[0] = 2;
back(1)--------------depth = 1
                     arr[0] !< 1
                     arr[0] !< 2
                     arr[0] < 3
                        arr[1] = 3;
                        back(2)--------------------depth = 2
                                                   arr[1] !< 1
                                                   arr[1] !< 2
                                                   arr[1] !< 3
                                                   arr[1] < 4
                                                      arr[2] = 4;
                                                      back(3)----------------- depth = 3 >= M
                                                                               print(2 3 4)
                     arr[0] < 4
                        arr[1] = 4;
                        back(2)--------------------depth = 2
                                                   arr[1] !< 1
                                                   arr[1] !< 2
                                                   arr[1] !< 3
                                                   arr[1] !< 4
arr[0] = 3;
back(1)--------------depth = 1
                     arr[0] !< 1
                     arr[0] !< 2
                     arr[0] !< 3
                     arr[0] < 4
                        arr[1] = 4;
                        back(2)--------------------depth = 2
                                                   arr[1] !< 1
                                                   arr[1] !< 2
                                                   arr[1] !< 3
                                                   arr[1] !< 4
arr[0] = 4;
back(1)--------------depth = 1
                     arr[0] !< 1
                     arr[0] !< 2
                     arr[0] !< 3
                     arr[0] !< 4

