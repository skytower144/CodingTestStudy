//합병 정렬_my version.//

#include <stdio.h>
int temp[1000001] = {0, };						//그러므로 전역 변수로 선언해서 재활용을 할 수 밖에 없다.

void merge(int *a, int left, int mid, int right)
{
	//int temp[1000001] = {0, };//				지역 변수로 선언시 매번 공간할당을 하므로 시간이 많이 걸린다.
	int l = left;
	int x = left;
	int j = mid+1;
	
	while(l<=mid && j<=right)
	{
		if(a[l]<a[j])
			temp[x++] = a[l++];
		else
			temp[x++] = a[j++];
	}
	while(l<=mid)
		temp[x++] = a[l++];
	while(j<=right)
		temp[x++] = a[j++];
	for(int i=left; i<=right; i++)
	{
		a[i] = temp[i];
	}
}

void divide(int *a, int left, int right)
{
	int mid;
	if(left<right)
	{
		mid = (left + right) / 2;
		
		divide(a, left, mid);
		divide(a, mid+1, right);
		merge(a, left, mid, right);	
	}
}

int main(void)
{
	int N;
	
	int num[1000001] = {0, };
	scanf("%d\n", &N);
	
	for(int t=0; t<N; t++)
	{
		scanf("%d", &num[t]);
	}
	
	divide(num, 0, N-1);
	for(int t=0; t<N; t++)
	{
		printf("%d\n", num[t]);
	}
	return 0;
}


/////////////////////////////////////////////////////////////////////////////////////////////
//퀵 정렬_my version.//

#include <stdio.h>

void swap(int *a, int *b)
{
	int temp;
	temp = *a;
	*a = *b;
	*b = temp;
}

void quick(int *a, int left, int right)
{
	int i = left+1;
	int j = left;
	int pivot = a[left];
	if(left<right)
	{
		for( ; i<=right; i++)
		{
			if(pivot>a[i])
			{
				j++;
				swap(&a[i],&a[j]);
			}
		}
		swap(&a[left], &a[j]);
		quick(a,left,j-1);
		quick(a,j+1,right);
	}
}
int main(void)
{
	int N;
	int num[1000001] = {0, };
	scanf("%d", &N);
	for(int t=0; t<N; t++)
	{
		scanf("%d", &num[t]);
	}
	quick(num,0,N-1);
	for(int t=0; t<N; t++)
	{
		printf("%d\n", num[t]);
	}
	return 0;
}