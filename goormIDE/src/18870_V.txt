//좌표 압축 // 좌표 정렬의 응용
https://2pound2pound.tistory.com/216
--------------------------------------------------------------------------------------------------

#include <stdio.h>

typedef struct{
	int x;
	int y;
}point;
point a[1000001];
point temp[1000001];
int c[1000001];
void merge(point*a, int left, int mid, int right)
{
	int j = mid+1;
	int k = left;
	int t = left;
	while(k<=mid && j<=right)
	{
		if(a[k].x > a[j].x)
			temp[t++] = a[j++];
		else if(a[k].x <= a[j].x)
			temp[t++] = a[k++];
	}
	if(k<=mid)
	{
		while(k<=mid)
			temp[t++] = a[k++];
	}
	else if(j<=right)
	{
		while(j<=right)
			temp[t++] = a[j++];
	}
	for(int k = left; k<=right; k++)
	{
		a[k] = temp[k];
	}
}

void partition(point *a, int left, int right)
{
	int mid;
	if(left<right)
	{
		mid = (left+right)/2;
		partition(a,left,mid);
		partition(a,mid+1,right);
		merge(a,left,mid,right);
	}
}
int main()
{
	int N;
	int ct=0;
	scanf("%d", &N);
	for(int i=0; i<N; i++)
	{
		scanf("%d", &a[i].x);
		a[i].y = i;
	}
	partition(a,0,N-1);
	for(int i=0; i<N; i++)
	{
		if(i==0)
			c[a[i].y] = 0;
		else
		{
			if(a[i].x == a[i-1].x)
			{
				c[a[i].y] = ct;
			}
			else
			{
				ct++;
				c[a[i].y] = ct;
			}
		}
	}
	for(int i=0; i<N; i++)
	{
		printf("%d ", c[i]);
	}
	printf("\n");
	
	return 0;
}
